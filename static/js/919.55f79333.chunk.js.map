{"version":3,"file":"static/js/919.55f79333.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ErrorNotification/ErrorNotification.module.scss?9eba","components/ErrorNotification/ErrorNotification.js","webpack://react-homework-template/./src/components/Heading/Heading.module.scss?1460","components/Heading/Heading.js","webpack://react-homework-template/./src/components/Input/Input.module.scss?f352","components/Input/Input.js","webpack://react-homework-template/./src/components/Loader/Loader.module.scss?a435","components/Loader/Loader.js","redux/phonebook/phonebookSelectors.js","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ButtonBig/ButtonBig.module.scss?0c2c","components/ButtonBig/ButtonBig.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.scss?6b75","components/ContactForm/ContactForm.js","webpack://react-homework-template/./src/components/ListItem/ListItem.module.scss?378d","webpack://react-homework-template/./src/components/ButtonSmall/ButtonSmall.module.scss?0746","components/ButtonSmall/ButtonSmall.js","webpack://react-homework-template/./src/components/Modal/Modal.module.scss?b72d","components/Modal/Modal.js","components/ListItem/ListItem.js","webpack://react-homework-template/./src/components/ContactsList/ContactsList.module.scss?9b70","components/ContactsList/ContactsList.js","webpack://react-homework-template/./src/components/Filter/Filter.module.scss?573d","components/Filter/Filter.js","pages/ContactsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"error_container\":\"ErrorNotification_error_container__gCegE\",\"error_notification\":\"ErrorNotification_error_notification__syaeP\"};","import css from './ErrorNotification.module.scss';\nimport PropTypes from 'prop-types';\n\nconst ErrorNotification = function ({ message }) {\n  return (\n    <div className={css.error_container}>\n      <p className={css.error_notification}>{message}</p>\n    </div>\n  );\n};\n\nErrorNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default ErrorNotification;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Heading_title__KZlGj\"};","import css from './Heading.module.scss';\nimport PropTypes from 'prop-types';\n\nconst Heading = function ({ tag, text }) {\n  const Tag = tag || 'h1';\n\n  return <Tag className={css.title}>{text}</Tag>;\n};\n\nHeading.propTypes = {\n  tag: PropTypes.string,\n  text: PropTypes.string.isRequired,\n};\n\nexport default Heading;\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Input_label__U9NhE\",\"input\":\"Input_input__k5Ctk\"};","import css from './Input.module.scss';\nimport PropTypes from 'prop-types';\n\nconst Input = function ({\n  label,\n  type,\n  value,\n  handler,\n  pattern,\n  title,\n  required,\n  name,\n}) {\n  return (\n    <label className={css.label}>\n      {label}\n      <input\n        className={css.input}\n        type={type}\n        value={value}\n        pattern={pattern}\n        title={title}\n        required={required}\n        onChange={handler}\n        name={name}\n      />\n    </label>\n  );\n};\n\nInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  type: PropTypes.oneOf(['text', 'tel', 'email', 'password']).isRequired,\n  value: PropTypes.string.isRequired,\n  handler: PropTypes.func.isRequired,\n  pattern: PropTypes.string,\n  title: PropTypes.string,\n  required: PropTypes.bool.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nexport default {\"loader__container\":\"Loader_loader__container__4ZO4+\"};","import { ThreeDots } from 'react-loader-spinner';\n\nimport css from './Loader.module.scss';\n\nconst Loader = () => {\n  return (\n    <div className={css.loader__container}>\n      <ThreeDots\n        height=\"80\"\n        width=\"80\"\n        radius=\"9\"\n        color=\"#17263b\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n","export const contactsSelector = state => state.phonebook.contacts.items;\nexport const filteredContactsSelector = state => {\n  const filteredContacts = state.phonebook.contacts.items.filter(contact =>\n    contact.name.toLowerCase().includes(state.phonebook.filter.toLowerCase())\n  );\n  return filteredContacts;\n};\nexport const filterSelector = state => state.phonebook.filter;\nexport const isLoadingSelector = state => state.phonebook.contacts.isLoading;\nexport const errorSelector = state => state.phonebook.contacts.error;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ButtonBig_button__sRyx1\"};","import css from './ButtonBig.module.scss';\nimport PropTypes from 'prop-types';\n\nconst ButtonBig = function ({ type, text, handler, children }) {\n  return (\n    <button className={css.button} type={type} onClick={handler}>\n      {children}\n      {text}\n    </button>\n  );\n};\n\nButtonBig.propTypes = {\n  type: PropTypes.oneOf(['button', 'submit']).isRequired,\n  text: PropTypes.string.isRequired,\n  handler: PropTypes.func,\n};\n\nexport default ButtonBig;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__zqkUM\"};","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsSelector } from 'redux/phonebook/phonebookSelectors';\nimport { nanoid } from 'nanoid';\nimport { addNewContactThunk } from 'redux/phonebook/phonebookThunk';\nimport Input from 'components/Input/Input';\nimport ButtonBig from 'components/ButtonBig/ButtonBig';\nimport css from './ContactForm.module.scss';\n\nconst ContactsForm = function () {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contactsList = useSelector(contactsSelector);\n  const dispatch = useDispatch();\n\n  const getExistNames = () => {\n    return contactsList.map(({ name }) => name);\n  };\n\n  const handlerInputChange = event => {\n    if (event.target.name === 'name') {\n      setName(event.target.value);\n    }\n    if (event.target.name === 'number') {\n      setNumber(event.target.value);\n    }\n  };\n\n  const handlerSubmitForm = event => {\n    event.preventDefault();\n\n    if (!getExistNames().includes(name)) {\n      const newContact = {\n        id: nanoid(5),\n        name,\n        number,\n      };\n      setName('');\n      setNumber('');\n      dispatch(addNewContactThunk(newContact));\n    } else {\n      window.alert(`${name} is already in contacts.`);\n    }\n  };\n\n  return (\n    <form className={css.form} onSubmit={e => handlerSubmitForm(e)}>\n      <Input\n        label=\"Name\"\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        handler={handlerInputChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required={true}\n      />\n      <Input\n        label=\"Phone number\"\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        handler={handlerInputChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required={true}\n      />\n      <ButtonBig type=\"submit\" text=\"Add contact\" />\n    </form>\n  );\n};\n\nexport default ContactsForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ListItem_contactItem__fgDfp\",\"contactText\":\"ListItem_contactText__gUHx4\",\"phoneText\":\"ListItem_phoneText__ebK+r\"};","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ButtonSmall_button__p3P4I\"};","import css from './ButtonSmall.module.scss';\nimport PropTypes from 'prop-types';\n\nconst ButtonSmall = function ({ type, text, id, handler }) {\n  return (\n    <button className={css.button} type={type} id={id} onClick={handler}>\n      {text}\n    </button>\n  );\n};\n\nButtonSmall.propTypes = {\n  type: PropTypes.oneOf(['submit', 'button']).isRequired,\n  text: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  handler: PropTypes.func.isRequired,\n};\n\nexport default ButtonSmall;\n","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"Modal_overlay__b+zEz\",\"modal\":\"Modal_modal__yEgVW\",\"form\":\"Modal_form__Kth9F\",\"buttons-thumb\":\"Modal_buttons-thumb__QW5dC\"};","import css from './Modal.module.scss';\nimport Input from 'components/Input/Input';\nimport ButtonBig from 'components/ButtonBig/ButtonBig';\nimport Heading from 'components/Heading/Heading';\nimport PropTypes from 'prop-types';\n\nconst Modal = function ({\n  currentName,\n  currentNumber,\n  handlerInputChange,\n  handlerSubmit,\n  closeModal,\n}) {\n  return (\n    <div className={css.overlay}>\n      <div className={css.modal}>\n        <Heading tag=\"h3\" text=\"Edit contact\" />\n        <form className={css.form} onSubmit={handlerSubmit}>\n          <Input\n            label=\"Name\"\n            type=\"text\"\n            name=\"name\"\n            value={currentName}\n            handler={handlerInputChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            required={true}\n          />\n          <Input\n            label=\"Phone number\"\n            type=\"tel\"\n            name=\"number\"\n            value={currentNumber}\n            handler={handlerInputChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            required={true}\n          />\n          <div className={css['buttons-container']}>\n            <ButtonBig type=\"submit\" text=\"Confirm\" />\n            <ButtonBig type=\"button\" text=\"Chancel\" handler={closeModal} />\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nModal.propTypes = {\n  currentName: PropTypes.string.isRequired,\n  currentNumber: PropTypes.string.isRequired,\n  handlerInputChange: PropTypes.func.isRequired,\n  handlerSubmit: PropTypes.func.isRequired,\n  closeModal: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n","import PropTypes from 'prop-types';\nimport css from './ListItem.module.scss';\nimport { useDispatch } from 'react-redux';\nimport {\n  getContactsThunk,\n  editContactThunk,\n  deleteContactThunk,\n} from '../../redux/phonebook/phonebookThunk';\nimport ButtonSmall from '../ButtonSmall/ButtonSmall';\nimport { useState } from 'react';\nimport  Modal  from '../../components/Modal/Modal';\n\nconst ListItem = function ({ name, number, id }) {\n  const [updatedName, setUpdatedName] = useState(name);\n  const [updatedNumber, setUpdatedNumber] = useState(number);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const handlerCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const handlerSubmitChangeInForm = event => {\n    event.preventDefault();\n    setIsModalOpen(false);\n\n    const editedContact = {\n      name: updatedName,\n      number: updatedNumber,\n    };\n    dispatch(editContactThunk({ id, editedContact }));\n  };\n\n  const handlerInputChange = event => {\n    if (event.target.name === 'name') {\n      setUpdatedName(event.target.value);\n    }\n    if (event.target.name === 'number') {\n      setUpdatedNumber(event.target.value);\n    }\n  };\n\n  return (\n    <>\n      <li className={css.contactItem}>\n        <p className={css.contactText}>{name}</p>\n        <p className={css.phoneText}>{number}</p>\n        <ButtonSmall\n          type=\"button\"\n          text=\"Edit\"\n          id={id}\n          handler={() => {\n            setIsModalOpen(true);\n          }}\n        />\n        <ButtonSmall\n          type=\"button\"\n          text=\"Delete\"\n          id={id}\n          handler={() => {\n            dispatch(deleteContactThunk(id));\n            dispatch(getContactsThunk());\n          }}\n        />\n      </li>\n      {isModalOpen && (\n        <Modal\n          currentName={updatedName}\n          currentNumber={updatedNumber}\n          handlerInputChange={handlerInputChange}\n          handlerSubmit={handlerSubmitChangeInForm}\n          closeModal={handlerCloseModal}\n        />\n      )}\n    </>\n  );\n};\n\nListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default ListItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"ContactsList_contactsList__0E36l\"};","import  ListItem  from '../ListItem/ListItem';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getContactsThunk } from '../../redux/phonebook/phonebookThunk';\nimport css from './ContactsList.module.scss';\nimport {\n  filteredContactsSelector,\n  isLoadingSelector,\n  errorSelector,\n} from 'redux/phonebook/phonebookSelectors';\nimport ErrorNotification from 'components/ErrorNotification/ErrorNotification';\nimport Loader from 'components/Loader/Loader';\n\nconst ContactsList = function () {\n  const filteredContacts = useSelector(filteredContactsSelector);\n  const isLoading = useSelector(isLoadingSelector);\n  const errorMessage = useSelector(errorSelector);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n      {errorMessage ? (\n        <ErrorNotification message={errorMessage} />\n      ) : filteredContacts.length > 0 ? (\n        <ul className={css.contactsList}>\n          {filteredContacts.map(({ id, name, number }) => {\n            return <ListItem key={id} name={name} number={number} id={id} />;\n          })}\n        </ul>\n      ) : (\n        <ErrorNotification message={'There is no contacts matching your request'} />\n      )}\n      {isLoading && <Loader />}\n    </>\n  );\n};\n\nexport default ContactsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__asygT\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { filterSelector } from 'redux/phonebook/phonebookSelectors';\nimport { updateFilter } from 'redux/phonebook/phonebookSlice';\nimport Input from 'components/Input/Input';\nimport css from './Filter.module.scss';\n\nconst Filter = () => {\n  const filter = useSelector(filterSelector);\n\n  const dispatch = useDispatch();\n\n  const filterChangeHandler = evt => {\n    const filterValue = evt.currentTarget.value;\n\n    dispatch(updateFilter(filterValue));\n  };\n\n  return (\n    <div className={css.filter}>\n      <Input\n        label=\"Find contacts by name\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        handler={e => filterChangeHandler(e)}\n        required={false}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport Heading from 'components/Heading/Heading';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport Filter from 'components/Filter/Filter';\n\nconst ContactsPage = function () {\n  return (\n    <div>\n      <Heading text=\"Contacts\" />\n      <ContactForm />\n      <Heading tag=\"h2\" text=\"Contacts List\" />\n      <Filter />\n      <ContactsList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["message","className","css","tag","text","Tag","label","type","value","handler","pattern","title","required","name","onChange","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","contactsSelector","state","phonebook","contacts","items","filteredContactsSelector","filter","contact","toLowerCase","includes","filterSelector","isLoadingSelector","isLoading","errorSelector","error","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","children","onClick","useState","setName","number","setNumber","contactsList","useSelector","dispatch","useDispatch","handlerInputChange","event","target","handlerSubmitForm","preventDefault","map","window","alert","newContact","addNewContactThunk","onSubmit","e","Input","currentName","currentNumber","handlerSubmit","closeModal","Heading","updatedName","setUpdatedName","updatedNumber","setUpdatedNumber","isModalOpen","setIsModalOpen","deleteContactThunk","getContactsThunk","editedContact","editContactThunk","filteredContacts","errorMessage","useEffect","ErrorNotification","length","Loader","evt","filterValue","currentTarget","updateFilter","filterChangeHandler","ContactForm"],"sourceRoot":""}